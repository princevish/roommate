{"version":3,"sources":["components/Theme.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["Theme","createTheme","breakpoints","values","xs","sm","md","lg","xl","palette","primary","blue","secondary","pink","typography","h6","fontWeight","overrides","MuiCardHeader","title","Navbar","lazy","Footer","NavBottom","Room","Chat","Chatlist","Search","Sell","Favorite","Profile","Notfound","Signup","Signin","Roomview","Checkmail","Setpassword","useStyles","makeStyles","theme","root","marginTop","spacing","marginBottom","App","classes","ThemeProvider","CssBaseline","fallback","Container","className","Alert","variant","severity","exact","path","Hidden","mdUp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.bcbc99a3.chunk.js","sourcesContent":["import { createTheme  } from \"@material-ui/core/styles\";\nimport { blue, pink } from \"@material-ui/core/colors\";\n\nconst Theme = createTheme ({\n  breakpoints: {\n    values: {\n      xs: 0,\n      sm: 600,\n      md: 960,\n      lg: 1280,\n      xl: 1920,\n    },\n  },\n  palette: {\n    primary: blue,\n    secondary: pink,\n  },\n  typography: {\n    h6: { fontWeight: 700 },\n  },\n\n  overrides: {\n    \"@global\": {},\n    MuiCardHeader: {\n      title: {\n        fontWeight: 700,\n      },\n    },\n  },\n});\n\nexport default Theme;\n","import React ,{Suspense,lazy} from \"react\";\nimport { Offline } from \"react-detect-offline\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Container from \"@material-ui/core/Container\";\nimport { makeStyles, ThemeProvider } from \"@material-ui/core/styles\";\nimport { CssBaseline, Hidden } from \"@material-ui/core\";\nimport Alert from '@material-ui/lab/Alert';\nimport Theme from \"./components/Theme\";\nlazy(()=> import ('@fontsource/roboto'));\nconst Navbar = lazy(()=> import(\"./components/Navbar\"));\nconst Footer = lazy(()=> import(\"./components/Footer\"));\nconst NavBottom = lazy(()=> import(\"./components/NavBottom\"));\nconst Room = lazy(()=> import(\"./components/Room\"));\nconst Chat = lazy(()=> import(\"./components/Chat\"));\nconst Chatlist = lazy(()=> import(\"./components/Chatlist\"));\nconst Search = lazy(()=> import(\"./components/Search\"));\nconst Sell = lazy(()=> import(\"./components/Sell\"));\nconst Favorite = lazy(()=> import(\"./components/Favorite\"));\nconst Profile = lazy(()=> import(\"./components/Profile\"));\nconst Notfound = lazy(()=> import(\"./components/Notfound\"));\nconst Signup = lazy(()=> import(\"./components/Signup\"));\nconst Signin = lazy(()=> import(\"./components/Signin\"));\nconst Roomview = lazy(()=> import(\"./components/Roomview\"));\nconst Checkmail = lazy(()=> import('./components/Forget/Checkmail'));\nconst Setpassword = lazy(()=> import('./components/Forget/Setpassword'));\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(10),\n    marginBottom: theme.spacing(10),\n  },\n}));\nfunction App() {\n  const classes = useStyles();\n  return (\n    <ThemeProvider theme={Theme}>\n      <CssBaseline />\n      <Router>\n      \n      <Suspense fallback={<div>Loading...</div>}>\n        <Navbar /> \n        </Suspense>\n        <Container className={classes.root}>\n        <Offline><Alert variant=\"filled\" severity=\"error\">No Internet Check Your Internet</Alert></Offline>\n        \n          <Switch>\n            <Route exact path=\"/\">\n            <Suspense fallback={<div>Loading...</div>}>\n              <Room />\n               </Suspense>\n            </Route>\n            <Route path=\"/search\">\n            <Suspense fallback={<div>Loading...</div>}>\n              <Search />\n               </Suspense>\n            </Route>\n            <Route path=\"/chatlist\">\n            <Suspense fallback={<div>Loading...</div>}>\n              <Chatlist />\n               </Suspense>\n            </Route>\n            <Route path=\"/chat/:room\">\n            <Suspense fallback={<div>Loading...</div>}>\n              <Chat />\n               </Suspense>\n            </Route>\n            <Route path=\"/sell\">\n            <Suspense fallback={<div>Loading...</div>}>\n              <Sell />\n               </Suspense>\n            </Route>\n            <Route path=\"/favorite\">\n            <Suspense fallback={<div>Loading...</div>}>\n              <Favorite />\n               </Suspense>\n            </Route>\n            <Route exact path=\"/profile\">\n            <Suspense fallback={<div>Loading...</div>}>\n              <Profile />\n               </Suspense>\n            </Route>\n            <Route path=\"/signin\">\n            <Suspense fallback={<div>Loading...</div>}>\n              <Signin />\n               </Suspense>\n            </Route>\n            <Route path=\"/signup\">\n            <Suspense fallback={<div>Loading...</div>}>\n              <Signup />\n               </Suspense>\n            </Route>\n            <Route path=\"/roomview/:id\">\n            <Suspense fallback={<div>Loading...</div>}>\n              <Roomview />\n               </Suspense>\n            </Route>\n            <Route exact path=\"/forget-password\">\n            <Suspense fallback={<div>Loading...</div>}>\n              <Checkmail />\n               </Suspense>\n            </Route>\n            <Route path=\"/forget-password/:id/:token\">\n            <Suspense fallback={<div>Loading...</div>}>\n              <Setpassword />\n               </Suspense>\n            </Route>\n            <Route>\n            <Suspense fallback={<div>Loading...</div>}>\n              <Notfound />\n               </Suspense>\n            </Route>\n          </Switch>\n         \n        \n          <Suspense fallback={<div>Loading...</div>}>\n            <Footer/>\n          </Suspense>\n        </Container>\n        <Hidden mdUp>\n          <Suspense fallback={<div>Loading...</div>}>\n          <NavBottom />\n          </Suspense>\n        </Hidden>\n      </Router>\n     \n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}